import{o as e,c as o,d as n}from"./app.5a9e1c4a.js";const s='{"title":"Mouse","description":"","frontmatter":{},"headers":[{"level":2,"title":".Button = {LEFT: 0, MIDDLE: 1, RIGHT: 2, FOURTH: 3, FIFTH: 4}","slug":"button-left-0-middle-1-right-2-fourth-3-fifth-4"},{"level":2,"title":".isButtonDown()","slug":"isbuttondown"},{"level":2,"title":".isButtonPressed()","slug":"isbuttonpressed"},{"level":2,"title":".isButtonReleased()","slug":"isbuttonreleased"},{"level":2,"title":".update()","slug":"update"},{"level":2,"title":".clear()","slug":"clear"},{"level":2,"title":".reset()","slug":"reset"},{"level":2,"title":".events.on(\'pressed\', null, (buttonCode, event, mouseX, mouseY) => { console.log(buttonCode); })","slug":"events-on-pressed-null-buttoncode-event-mousex-mousey-console-log-buttoncode"},{"level":2,"title":".events.on(\'released\', null, (buttonCode, event, mouseX, mouseY, mouseOriginX, mouseOriginY, mouseMoveX, mouseMove) => { console.log(buttonCode); })","slug":"events-on-released-null-buttoncode-event-mousex-mousey-mouseoriginx-mouseoriginy-mousemovex-mousemove-console-log-buttoncode"},{"level":2,"title":".events.on(\'down\', null, (buttonCode, event, mouseX, mouseY, mouseOriginX, mouseOriginY, mouseMoveX, mouseMoveY) => { console.log(buttonCode); })","slug":"events-on-down-null-buttoncode-event-mousex-mousey-mouseoriginx-mouseoriginy-mousemovex-mousemovey-console-log-buttoncode"},{"level":2,"title":".events.on(\'pressed_\' + Mouse.Button.LEFT, null, (buttonCode, event, mouseX, mouseY) => { console.log(buttonCode); })","slug":"events-on-pressed-mouse-button-left-null-buttoncode-event-mousex-mousey-console-log-buttoncode"},{"level":2,"title":".events.on(\'released_\' + Mouse.Button.LEFT, null, (buttonCode, event, mouseX, mouseY, mouseOriginX, mouseOriginY, mouseMoveX, mouseMove) => { console.log(buttonCode); })","slug":"events-on-released-mouse-button-left-null-buttoncode-event-mousex-mousey-mouseoriginx-mouseoriginy-mousemovex-mousemove-console-log-buttoncode"},{"level":2,"title":".events.on(\'down_\' + Mouse.Button.LEFT, null, (buttonCode, event, mouseX, mouseY, mouseOriginX, mouseOriginY, mouseMoveX, mouseMove) => { console.log(buttonCode); })","slug":"events-on-down-mouse-button-left-null-buttoncode-event-mousex-mousey-mouseoriginx-mouseoriginy-mousemovex-mousemove-console-log-buttoncode"}],"relativePath":"content/mouse.md","lastUpdated":1614700295974}',t={},u=n('<h1 id="mouse"><a class="header-anchor" href="#mouse" aria-hidden="true">#</a> Mouse</h1><h2 id="button-left-0-middle-1-right-2-fourth-3-fifth-4"><a class="header-anchor" href="#button-left-0-middle-1-right-2-fourth-3-fifth-4" aria-hidden="true">#</a> .Button = {LEFT: 0, MIDDLE: 1, RIGHT: 2, FOURTH: 3, FIFTH: 4}</h2><p>Bind for specific button.</p><h2 id="isbuttondown"><a class="header-anchor" href="#isbuttondown" aria-hidden="true">#</a> .isButtonDown()</h2><p>.isButtonDown(Controller.Mouse.isButtonDown(Mouse.Button.LEFT) )</p><p>Checks if the key is held.</p><h2 id="isbuttonpressed"><a class="header-anchor" href="#isbuttonpressed" aria-hidden="true">#</a> .isButtonPressed()</h2><p>.isButtonPressed(Controller.Mouse.isButtonDown(Mouse.Button.LEFT) )</p><p>Checks if the key was pressed, holding will not trigger this more than once.</p><h2 id="isbuttonreleased"><a class="header-anchor" href="#isbuttonreleased" aria-hidden="true">#</a> .isButtonReleased()</h2><p>.isButtonReleased(Controller.Mouse.isButtonDown(Mouse.Button.LEFT))</p><p>Checks whether the key was just released.</p><h2 id="update"><a class="header-anchor" href="#update" aria-hidden="true">#</a> .update()</h2><p>Ensure to use this for correct event handling at the end of the game loop.</p><h2 id="clear"><a class="header-anchor" href="#clear" aria-hidden="true">#</a> .clear()</h2><p>Clear internal events</p><h2 id="reset"><a class="header-anchor" href="#reset" aria-hidden="true">#</a> .reset()</h2><p>Insert events on a new canvas, deleting older events</p><div class="language-js"><pre><code><span class="token keyword">import</span> Controller <span class="token keyword">from</span> <span class="token string">&#39;pixi.js-controller&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PIXI<span class="token punctuation">.</span>Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ...</span>\n\napp<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> newApp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PIXI<span class="token punctuation">.</span>Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nController<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="events-on-pressed-null-buttoncode-event-mousex-mousey-console-log-buttoncode"><a class="header-anchor" href="#events-on-pressed-null-buttoncode-event-mousex-mousey-console-log-buttoncode" aria-hidden="true">#</a> .events.on(&#39;pressed&#39;, null, (buttonCode, event, mouseX, mouseY) =&gt; { console.log(buttonCode); })</h2><p>Callback when any key is pressed.</p><h2 id="events-on-released-null-buttoncode-event-mousex-mousey-mouseoriginx-mouseoriginy-mousemovex-mousemove-console-log-buttoncode"><a class="header-anchor" href="#events-on-released-null-buttoncode-event-mousex-mousey-mouseoriginx-mouseoriginy-mousemovex-mousemove-console-log-buttoncode" aria-hidden="true">#</a> .events.on(&#39;released&#39;, null, (buttonCode, event, mouseX, mouseY, mouseOriginX, mouseOriginY, mouseMoveX, mouseMove) =&gt; { console.log(buttonCode); })</h2><p>Callback when any key is released.</p><h2 id="events-on-down-null-buttoncode-event-mousex-mousey-mouseoriginx-mouseoriginy-mousemovex-mousemovey-console-log-buttoncode"><a class="header-anchor" href="#events-on-down-null-buttoncode-event-mousex-mousey-mouseoriginx-mouseoriginy-mousemovex-mousemovey-console-log-buttoncode" aria-hidden="true">#</a> .events.on(&#39;down&#39;, null, (buttonCode, event, mouseX, mouseY, mouseOriginX, mouseOriginY, mouseMoveX, mouseMoveY) =&gt; { console.log(buttonCode); })</h2><p>Callback when any key is down.</p><h2 id="events-on-pressed-mouse-button-left-null-buttoncode-event-mousex-mousey-console-log-buttoncode"><a class="header-anchor" href="#events-on-pressed-mouse-button-left-null-buttoncode-event-mousex-mousey-console-log-buttoncode" aria-hidden="true">#</a> .events.on(&#39;pressed_&#39; + Mouse.Button.LEFT, null, (buttonCode, event, mouseX, mouseY) =&gt; { console.log(buttonCode); })</h2><p>Callback when a particular key is pressed.</p><h2 id="events-on-released-mouse-button-left-null-buttoncode-event-mousex-mousey-mouseoriginx-mouseoriginy-mousemovex-mousemove-console-log-buttoncode"><a class="header-anchor" href="#events-on-released-mouse-button-left-null-buttoncode-event-mousex-mousey-mouseoriginx-mouseoriginy-mousemovex-mousemove-console-log-buttoncode" aria-hidden="true">#</a> .events.on(&#39;released_&#39; + Mouse.Button.LEFT, null, (buttonCode, event, mouseX, mouseY, mouseOriginX, mouseOriginY, mouseMoveX, mouseMove) =&gt; { console.log(buttonCode); })</h2><p>Callback when a particular key is released.</p><h2 id="events-on-down-mouse-button-left-null-buttoncode-event-mousex-mousey-mouseoriginx-mouseoriginy-mousemovex-mousemove-console-log-buttoncode"><a class="header-anchor" href="#events-on-down-mouse-button-left-null-buttoncode-event-mousex-mousey-mouseoriginx-mouseoriginy-mousemovex-mousemove-console-log-buttoncode" aria-hidden="true">#</a> .events.on(&#39;down_&#39; + Mouse.Button.LEFT, null, (buttonCode, event, mouseX, mouseY, mouseOriginX, mouseOriginY, mouseMoveX, mouseMove) =&gt; { console.log(buttonCode); })</h2><p>Callback when a particular key is down.</p>',31);t.render=function(n,s,t,l,a,i){return e(),o("div",null,[u])};export default t;export{s as __pageData};
